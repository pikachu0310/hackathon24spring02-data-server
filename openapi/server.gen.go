// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
	. "github.com/pikachu0310/hackathon24spring02-data-server/openapi/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// アイテムを合成
	// (POST /items/combine)
	CombineItems(ctx echo.Context) error
	// アイテムとパラメーターを取得
	// (POST /items/parameters)
	GetItemWithParameters(ctx echo.Context) error
	// アイテムを取得
	// (GET /items/{itemId})
	GetItem(ctx echo.Context, itemId openapi_types.UUID) error
	// サーバーの生存確認
	// (GET /ping)
	PingServer(ctx echo.Context) error
	// テスト用
	// (GET /test)
	Test(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CombineItems converts echo context to params.
func (w *ServerInterfaceWrapper) CombineItems(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CombineItems(ctx)
	return err
}

// GetItemWithParameters converts echo context to params.
func (w *ServerInterfaceWrapper) GetItemWithParameters(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetItemWithParameters(ctx)
	return err
}

// GetItem converts echo context to params.
func (w *ServerInterfaceWrapper) GetItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", ctx.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetItem(ctx, itemId)
	return err
}

// PingServer converts echo context to params.
func (w *ServerInterfaceWrapper) PingServer(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PingServer(ctx)
	return err
}

// Test converts echo context to params.
func (w *ServerInterfaceWrapper) Test(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Test(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/items/combine", wrapper.CombineItems)
	router.POST(baseURL+"/items/parameters", wrapper.GetItemWithParameters)
	router.GET(baseURL+"/items/:itemId", wrapper.GetItem)
	router.GET(baseURL+"/ping", wrapper.PingServer)
	router.GET(baseURL+"/test", wrapper.Test)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RW70/bRhj+V9BtH0AK2PzQVPkba7Ut2lQiVjRNFaoO50iujX2efa6KUCrs61DWDjVD",
	"MDqVroBQS6EwaFdtY7T7Y65Ouv9ies+BxMSQdWLbh36B2L73fe957nnee6eRySyH2cTmHjKmkWcWiYXV",
	"zywnFvx3XOYQl1Oi3mLOXTrhcwIPeeKZLnU4ZTYykAzXZLguxawUKzLYifZ+rM087uruv/mBDHZqiz/X",
	"Fnd7UAbxKYcgA1GbkwJxUTmTTNMhqxSLUjyV4kCKqvo7K8NtGf4mRaWZ2+MutQuQmuZPz5i9gDJokrkW",
	"5shAvk/zaVlsbP0NvNW56Ju5tHAXu5RPtSeIDn6RwWK0/yiqVmRwqxuAhWvR/qOerm79Zr9ibTfaXupp",
	"3eNkiWHerGL71gSwCGXIVz51SR4Zl5HCobadpDfTcoBHGxs/ysYmrhKTozKko/Ykgz2bzObY5PAz5gE5",
	"9Bo2i74+2K+jDPLdEjJQkXPHMzStQHnRn+gzmaW1LNOK2LyGeZHZA0OeA7zoA715zHGvR9zrKSpAUtyV",
	"QshwS4YvpXgug8evXy7L8I4MN+FRPFHUP5fhM6WClfrCBqhjJhjOyuBXJZRNGf4kw41YHDK8JcWSYnhd",
	"inUICnbqL/bebFRq4utoZU8GmzJ4IsP5+s5qvTorgx9keGc4l5XhiyO1Ae2Ul4CDToAy6DpxvRhLf5/e",
	"pwNE5hAbOxQZaLBP7xtEGeRgXlS+0ignlqeZzJqgthKbwzxFOrgPAyvZPDLQ+XgBmNND8ZkTj3/I8lOH",
	"Z0VsFYYdp0RNFahd9WJnxe5uNzXUzub7UxRardQq1ZiL2vJMVHkAzL61f+L8A6fnf73/bX1xs35/5x+U",
	"KKcquGkI7vpEvfAcZnsx6AFdfyvK3nfJJDLQe1qzY2qNdqmpXqlqJvHVKtXo9sOu3q4G0BZY0d3vo1dL",
	"wM6QPtTOzEXGuz5ivp1X4DzfsrA7dbzphPNxXiAEFzxlfCWMcQhqSMrBLrYIJ653sqo+JhwgfEF5Mddc",
	"frbyOotGfAxLosonuZQKYh66iKhI8aDRMFrviZY7qLbwe21eRLfvtydpfkoL/PPes+jVampg81N7YIpi",
	"/wMNJxl799g8wZ3Jm3xDiu/gghGr0PjDP6Q4OAuzpuUFB8epT3PwdGygMhQukJPti5IGudzRbxTewhV0",
	"OCwYh149LrxMi4g69eLx/7PR/gst9rQDcgDySceSo3bh88NxoAMlnNzgmlPC9BgZ5Aa2HDVxOMwupLDd",
	"RkWONW7EVkTNGQbGnoWH0fa9+tr+m805tVLjJL4VUmFcgo/pAJKVRz49Xhemc5i+6gsb8Vbj6ShVnGJb",
	"GWJLiq36/G60JhKzpaFpJWbiUpF53Dinn9M1GKTKmbb2svwUpoj2BDCcfjkyNnolNzpyYez8pezIxStj",
	"o58hkGvjZE/zy3AumzSJh8rj5b8CAAD//5bvC4E/DQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
