// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// アイテムを取得
	// (GET /items)
	CreateItem(ctx echo.Context) error
	// アイテムを合成
	// (POST /items/combine)
	CombineItems(ctx echo.Context) error
	// アイテムとパラメーターを取得
	// (POST /items/parameters)
	GetItemWithParameters(ctx echo.Context) error
	// アイテムを取得
	// (GET /items/{itemId})
	GetItem(ctx echo.Context, itemId openapi_types.UUID) error
	// サーバーの生存確認
	// (GET /ping)
	PingServer(ctx echo.Context) error
	// テスト用
	// (GET /test)
	Test(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateItem converts echo context to params.
func (w *ServerInterfaceWrapper) CreateItem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateItem(ctx)
	return err
}

// CombineItems converts echo context to params.
func (w *ServerInterfaceWrapper) CombineItems(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CombineItems(ctx)
	return err
}

// GetItemWithParameters converts echo context to params.
func (w *ServerInterfaceWrapper) GetItemWithParameters(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetItemWithParameters(ctx)
	return err
}

// GetItem converts echo context to params.
func (w *ServerInterfaceWrapper) GetItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", ctx.Param("itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetItem(ctx, itemId)
	return err
}

// PingServer converts echo context to params.
func (w *ServerInterfaceWrapper) PingServer(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PingServer(ctx)
	return err
}

// Test converts echo context to params.
func (w *ServerInterfaceWrapper) Test(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Test(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/items", wrapper.CreateItem)
	router.POST(baseURL+"/items/combine", wrapper.CombineItems)
	router.POST(baseURL+"/items/parameters", wrapper.GetItemWithParameters)
	router.GET(baseURL+"/items/:itemId", wrapper.GetItem)
	router.GET(baseURL+"/ping", wrapper.PingServer)
	router.GET(baseURL+"/test", wrapper.Test)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RXXU8bRxT9K2jah0Ra2OVDVbRvNKit1SpYNKiqIhQN68Ge4N2d7o6jIOSI3UmRmxTF",
	"RVBShTSAUEIgUEgataUk/TE3a6f/oppZg78WDC1qH/oCa7NzZs6558y9TCPLtZnrEIf7yJxGvpUjNlaP",
	"KU5s+Zt5LiMep0R9izn36HiBE/khQ3zLo4xT10EmgnANwnUQsyBWINiJ9n6szDztutB7+wMIdiqLP1cW",
	"dy8iDfEpRpCJqMNJlnioqDXDdEAFsQjiOYgDEGX1cxbCbQh/A1GqY/vco05WQtPMyYipIaShCdezMUcm",
	"KhRoJgnFwfYp+Jbnom/mkpZ72KN8qh0gOvgFgsVo/0lULkFw54IkFq5F+08udl0wbvcq1Xaj7aUk1SQs",
	"+apAPZJB5jWkzq2O2Syn1lCwo4OMHcG54zeIxVFRwlFnwpVntFyHY4vLx5g3YnQSW7mC0d9rIA0VvDwy",
	"UY5z5pu6nqU8VxjvsVxbb3hNz2FrEvOc6/QN+EzqYPR1ZzDH3T7xbiZUHYG4D0JAuAXhaxAvIXj69vUy",
	"hPcg3JQfxTMl9UsIX6iqr1QXNqQbZoLBFAS/KmNsQvgThBuxGSC8A2JJKboOYl0uCnaqr/bebZQq4uto",
	"ZQ+CTQieQThf3Vmtlmch+AHCe4PpFISvjtwldac8LzXoREhDN4nnx1x6e4weQ1J0GXEwo8hE/T1GTz/S",
	"EMM8p3KkU05s9ZQlSmsZMizFSGWQiS57BHOiIigL7TPX8eMA9hnGYZWIo1ZixvLUUmv1G36coTjH8ul9",
	"j0wgE72n14Ou11KuK3xV/OZiVErl6O7jru6uRotH97+P3ixJWgPGQLuZr7i86yO34GSUN/2CbWNvqjUl",
	"4XwNRUMcZ33lXKXDmFwUayIPOk4dFTjm+knixC+k1Mo4B8TnH7qZqTMp03yxyb1Tmd6ElJZLlVI59kdl",
	"eSYqPZJuO/MdEuP3nYz/dv/b6uJm9eHO39iimJjq+iXBvQIp/pdmqhE9f0sp3BMtxbCHbcKJ5x/vqo8J",
	"lxS+oDyXrr9+vvY6j2bUwqVpl0HOsTXZvktl4ffKvIjuPkzsv0NkgjhWQof788GL6M3qccs+SSfQEfPy",
	"GhclEI9qN3ZjY25sX61m/Rfs2yzWSUL+E25ag9xnrERd8DPV4rRqnuKWh2ADxHey34pV2QfDP0AcnEdO",
	"k3BP1w+m4+wUj22WteSi5mxc6xg1Kr+VHflwdjIPY9pqPK3BRJ2u4bH/UcNmkvJxZUlTJ/v54XTUQRJO",
	"bnGd5TFtEYPcwjZTAxhznWyC2m1SpN1aM2xkVB/p5BS48DjaflBd23+3Oafe1DmJG0Iijavyj8kEmnce",
	"/rR1X/nPiRxGqwsb8VHjYTHRnGJbBWILxFZ1fjdaE02jtqnredfC+Zzrc/OSccnQ5VxZ1Nqul+XncoBo",
	"B5Cz+pfDoyPX0yPDQ6OXr6aGr1wfHfkMSbvWKntSXgbTqeaQ+Kg4VvwrAAD//wsnaMw+DgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
